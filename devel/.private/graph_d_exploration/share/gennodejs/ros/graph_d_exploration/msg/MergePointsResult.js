// Auto-generated. Do not edit!

// (in-package graph_d_exploration.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Point2D = require('./Point2D.js');

//-----------------------------------------------------------

class MergePointsResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.merged_points = null;
      this.radius_used = null;
      this.percentage_used = null;
    }
    else {
      if (initObj.hasOwnProperty('merged_points')) {
        this.merged_points = initObj.merged_points
      }
      else {
        this.merged_points = [];
      }
      if (initObj.hasOwnProperty('radius_used')) {
        this.radius_used = initObj.radius_used
      }
      else {
        this.radius_used = 0.0;
      }
      if (initObj.hasOwnProperty('percentage_used')) {
        this.percentage_used = initObj.percentage_used
      }
      else {
        this.percentage_used = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MergePointsResult
    // Serialize message field [merged_points]
    // Serialize the length for message field [merged_points]
    bufferOffset = _serializer.uint32(obj.merged_points.length, buffer, bufferOffset);
    obj.merged_points.forEach((val) => {
      bufferOffset = Point2D.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [radius_used]
    bufferOffset = _serializer.float32(obj.radius_used, buffer, bufferOffset);
    // Serialize message field [percentage_used]
    bufferOffset = _serializer.float32(obj.percentage_used, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MergePointsResult
    let len;
    let data = new MergePointsResult(null);
    // Deserialize message field [merged_points]
    // Deserialize array length for message field [merged_points]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.merged_points = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.merged_points[i] = Point2D.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [radius_used]
    data.radius_used = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [percentage_used]
    data.percentage_used = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 8 * object.merged_points.length;
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'graph_d_exploration/MergePointsResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '5567672ae4c3263cec809b91db7a6653';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the action result message
    Point2D[] merged_points
    float32 radius_used
    float32 percentage_used
    
    ================================================================================
    MSG: graph_d_exploration/Point2D
    # Point for centroids
    float32 x
    float32 y
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MergePointsResult(null);
    if (msg.merged_points !== undefined) {
      resolved.merged_points = new Array(msg.merged_points.length);
      for (let i = 0; i < resolved.merged_points.length; ++i) {
        resolved.merged_points[i] = Point2D.Resolve(msg.merged_points[i]);
      }
    }
    else {
      resolved.merged_points = []
    }

    if (msg.radius_used !== undefined) {
      resolved.radius_used = msg.radius_used;
    }
    else {
      resolved.radius_used = 0.0
    }

    if (msg.percentage_used !== undefined) {
      resolved.percentage_used = msg.percentage_used;
    }
    else {
      resolved.percentage_used = 0.0
    }

    return resolved;
    }
};

module.exports = MergePointsResult;
