// Generated by gencpp from file graph_d_exploration/MergePointsGoal.msg
// DO NOT EDIT!


#ifndef GRAPH_D_EXPLORATION_MESSAGE_MERGEPOINTSGOAL_H
#define GRAPH_D_EXPLORATION_MESSAGE_MERGEPOINTSGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_d_exploration/Point2D.h>

namespace graph_d_exploration
{
template <class ContainerAllocator>
struct MergePointsGoal_
{
  typedef MergePointsGoal_<ContainerAllocator> Type;

  MergePointsGoal_()
    : client_id()
    , points()
    , robot_id()  {
    }
  MergePointsGoal_(const ContainerAllocator& _alloc)
    : client_id(_alloc)
    , points(_alloc)
    , robot_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _client_id_type;
  _client_id_type client_id;

   typedef std::vector< ::graph_d_exploration::Point2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_d_exploration::Point2D_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;





  typedef boost::shared_ptr< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MergePointsGoal_

typedef ::graph_d_exploration::MergePointsGoal_<std::allocator<void> > MergePointsGoal;

typedef boost::shared_ptr< ::graph_d_exploration::MergePointsGoal > MergePointsGoalPtr;
typedef boost::shared_ptr< ::graph_d_exploration::MergePointsGoal const> MergePointsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator1> & lhs, const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.client_id == rhs.client_id &&
    lhs.points == rhs.points &&
    lhs.robot_id == rhs.robot_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator1> & lhs, const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_d_exploration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2c66b8a0ad24cf595212d5c25aaea6b";
  }

  static const char* value(const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2c66b8a0ad24cf5ULL;
  static const uint64_t static_value2 = 0x95212d5c25aaea6bULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_d_exploration/MergePointsGoal";
  }

  static const char* value(const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a message type for passing an array of points to the server and getting the merged points back\n"
"\n"
"# Define the action goal message\n"
"string client_id\n"
"Point2D[] points\n"
"string robot_id\n"
"\n"
"================================================================================\n"
"MSG: graph_d_exploration/Point2D\n"
"# Point for centroids\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.client_id);
      stream.next(m.points);
      stream.next(m.robot_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MergePointsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_d_exploration::MergePointsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_d_exploration::MergePointsGoal_<ContainerAllocator>& v)
  {
    s << indent << "client_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.client_id);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::graph_d_exploration::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_D_EXPLORATION_MESSAGE_MERGEPOINTSGOAL_H
