// Generated by gencpp from file hector_moveit_actions/ExecuteDroneTrajectoryFeedback.msg
// DO NOT EDIT!


#ifndef HECTOR_MOVEIT_ACTIONS_MESSAGE_EXECUTEDRONETRAJECTORYFEEDBACK_H
#define HECTOR_MOVEIT_ACTIONS_MESSAGE_EXECUTEDRONETRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace hector_moveit_actions
{
template <class ContainerAllocator>
struct ExecuteDroneTrajectoryFeedback_
{
  typedef ExecuteDroneTrajectoryFeedback_<ContainerAllocator> Type;

  ExecuteDroneTrajectoryFeedback_()
    : current_pose()  {
    }
  ExecuteDroneTrajectoryFeedback_(const ContainerAllocator& _alloc)
    : current_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _current_pose_type;
  _current_pose_type current_pose;





  typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteDroneTrajectoryFeedback_

typedef ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<std::allocator<void> > ExecuteDroneTrajectoryFeedback;

typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback > ExecuteDroneTrajectoryFeedbackPtr;
typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback const> ExecuteDroneTrajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.current_pose == rhs.current_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hector_moveit_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8aa49ba45d5b9d2df8a650fff8d23e31";
  }

  static const char* value(const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8aa49ba45d5b9d2dULL;
  static const uint64_t static_value2 = 0xf8a650fff8d23e31ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_moveit_actions/ExecuteDroneTrajectoryFeedback";
  }

  static const char* value(const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#Feedback definition\n"
"geometry_msgs/Pose current_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteDroneTrajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_moveit_actions::ExecuteDroneTrajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "current_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_MOVEIT_ACTIONS_MESSAGE_EXECUTEDRONETRAJECTORYFEEDBACK_H
