// Generated by gencpp from file hector_moveit_actions/ExecuteDroneTrajectoryResult.msg
// DO NOT EDIT!


#ifndef HECTOR_MOVEIT_ACTIONS_MESSAGE_EXECUTEDRONETRAJECTORYRESULT_H
#define HECTOR_MOVEIT_ACTIONS_MESSAGE_EXECUTEDRONETRAJECTORYRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hector_moveit_actions
{
template <class ContainerAllocator>
struct ExecuteDroneTrajectoryResult_
{
  typedef ExecuteDroneTrajectoryResult_<ContainerAllocator> Type;

  ExecuteDroneTrajectoryResult_()
    : result_code(0)  {
    }
  ExecuteDroneTrajectoryResult_(const ContainerAllocator& _alloc)
    : result_code(0)  {
  (void)_alloc;
    }



   typedef int32_t _result_code_type;
  _result_code_type result_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESSFUL)
  #undef SUCCESSFUL
#endif
#if defined(_WIN32) && defined(INVALID_GOAL)
  #undef INVALID_GOAL
#endif
#if defined(_WIN32) && defined(PATH_TOLERANCE_VIOLATED)
  #undef PATH_TOLERANCE_VIOLATED
#endif
#if defined(_WIN32) && defined(COLLISION_IN_FRONT)
  #undef COLLISION_IN_FRONT
#endif

  enum {
    SUCCESSFUL = 0,
    INVALID_GOAL = -1,
    PATH_TOLERANCE_VIOLATED = -2,
    COLLISION_IN_FRONT = 3,
  };


  typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteDroneTrajectoryResult_

typedef ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<std::allocator<void> > ExecuteDroneTrajectoryResult;

typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryResult > ExecuteDroneTrajectoryResultPtr;
typedef boost::shared_ptr< ::hector_moveit_actions::ExecuteDroneTrajectoryResult const> ExecuteDroneTrajectoryResultConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator1> & lhs, const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator2> & rhs)
{
  return lhs.result_code == rhs.result_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator1> & lhs, const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hector_moveit_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "264ca3d6aad1463d76554dc6f52d4444";
  }

  static const char* value(const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x264ca3d6aad1463dULL;
  static const uint64_t static_value2 = 0x76554dc6f52d4444ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_moveit_actions/ExecuteDroneTrajectoryResult";
  }

  static const char* value(const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"int32 result_code\n"
"int32 SUCCESSFUL = 0\n"
"int32 INVALID_GOAL = -1\n"
"int32 PATH_TOLERANCE_VIOLATED = -2\n"
"int32 COLLISION_IN_FRONT = 3\n"
;
  }

  static const char* value(const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteDroneTrajectoryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_moveit_actions::ExecuteDroneTrajectoryResult_<ContainerAllocator>& v)
  {
    s << indent << "result_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_MOVEIT_ACTIONS_MESSAGE_EXECUTEDRONETRAJECTORYRESULT_H
