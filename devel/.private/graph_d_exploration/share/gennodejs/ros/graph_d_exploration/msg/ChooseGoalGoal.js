// Auto-generated. Do not edit!

// (in-package graph_d_exploration.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let InfoMatrix = require('./InfoMatrix.js');

//-----------------------------------------------------------

class ChooseGoalGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.client_id = null;
      this.matrix = null;
      this.rows = null;
      this.robot_id = null;
    }
    else {
      if (initObj.hasOwnProperty('client_id')) {
        this.client_id = initObj.client_id
      }
      else {
        this.client_id = '';
      }
      if (initObj.hasOwnProperty('matrix')) {
        this.matrix = initObj.matrix
      }
      else {
        this.matrix = new InfoMatrix();
      }
      if (initObj.hasOwnProperty('rows')) {
        this.rows = initObj.rows
      }
      else {
        this.rows = 0;
      }
      if (initObj.hasOwnProperty('robot_id')) {
        this.robot_id = initObj.robot_id
      }
      else {
        this.robot_id = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ChooseGoalGoal
    // Serialize message field [client_id]
    bufferOffset = _serializer.string(obj.client_id, buffer, bufferOffset);
    // Serialize message field [matrix]
    bufferOffset = InfoMatrix.serialize(obj.matrix, buffer, bufferOffset);
    // Serialize message field [rows]
    bufferOffset = _serializer.int8(obj.rows, buffer, bufferOffset);
    // Serialize message field [robot_id]
    bufferOffset = _serializer.string(obj.robot_id, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ChooseGoalGoal
    let len;
    let data = new ChooseGoalGoal(null);
    // Deserialize message field [client_id]
    data.client_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [matrix]
    data.matrix = InfoMatrix.deserialize(buffer, bufferOffset);
    // Deserialize message field [rows]
    data.rows = _deserializer.int8(buffer, bufferOffset);
    // Deserialize message field [robot_id]
    data.robot_id = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.client_id);
    length += InfoMatrix.getMessageSize(object.matrix);
    length += _getByteLength(object.robot_id);
    return length + 9;
  }

  static datatype() {
    // Returns string type for a message object
    return 'graph_d_exploration/ChooseGoalGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '509f8eacc5e6cf8cd798fe0b532c7bb1';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Action definition for choosing centroids
    # The goal specifies the client id and the matrix with the lists in which each element is of the form [Reward, X, Y]
    # The action server should try to choose the centroid that maximizes the information gain depending on the priority
    # of the robots (r0 > ... > rn)
    
    # Goal definition
    string client_id
    InfoMatrix matrix
    int8 rows
    string robot_id
    
    ================================================================================
    MSG: graph_d_exploration/InfoMatrix
    # Matrix of type [Reward, X, Y] with dimensions [nx3]
    uint32 rows
    float32[] data
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ChooseGoalGoal(null);
    if (msg.client_id !== undefined) {
      resolved.client_id = msg.client_id;
    }
    else {
      resolved.client_id = ''
    }

    if (msg.matrix !== undefined) {
      resolved.matrix = InfoMatrix.Resolve(msg.matrix)
    }
    else {
      resolved.matrix = new InfoMatrix()
    }

    if (msg.rows !== undefined) {
      resolved.rows = msg.rows;
    }
    else {
      resolved.rows = 0
    }

    if (msg.robot_id !== undefined) {
      resolved.robot_id = msg.robot_id;
    }
    else {
      resolved.robot_id = ''
    }

    return resolved;
    }
};

module.exports = ChooseGoalGoal;
