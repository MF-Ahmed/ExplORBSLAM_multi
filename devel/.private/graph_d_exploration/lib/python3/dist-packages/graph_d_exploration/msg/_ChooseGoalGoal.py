# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_d_exploration/ChooseGoalGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import graph_d_exploration.msg

class ChooseGoalGoal(genpy.Message):
  _md5sum = "509f8eacc5e6cf8cd798fe0b532c7bb1"
  _type = "graph_d_exploration/ChooseGoalGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Action definition for choosing centroids
# The goal specifies the client id and the matrix with the lists in which each element is of the form [Reward, X, Y]
# The action server should try to choose the centroid that maximizes the information gain depending on the priority
# of the robots (r0 > ... > rn)

# Goal definition
string client_id
InfoMatrix matrix
int8 rows
string robot_id

================================================================================
MSG: graph_d_exploration/InfoMatrix
# Matrix of type [Reward, X, Y] with dimensions [nx3]
uint32 rows
float32[] data"""
  __slots__ = ['client_id','matrix','rows','robot_id']
  _slot_types = ['string','graph_d_exploration/InfoMatrix','int8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       client_id,matrix,rows,robot_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChooseGoalGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.client_id is None:
        self.client_id = ''
      if self.matrix is None:
        self.matrix = graph_d_exploration.msg.InfoMatrix()
      if self.rows is None:
        self.rows = 0
      if self.robot_id is None:
        self.robot_id = ''
    else:
      self.client_id = ''
      self.matrix = graph_d_exploration.msg.InfoMatrix()
      self.rows = 0
      self.robot_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.client_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.matrix.rows
      buff.write(_get_struct_I().pack(_x))
      length = len(self.matrix.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.matrix.data))
      _x = self.rows
      buff.write(_get_struct_b().pack(_x))
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.matrix is None:
        self.matrix = graph_d_exploration.msg.InfoMatrix()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.client_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.client_id = str[start:end]
      start = end
      end += 4
      (self.matrix.rows,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix.data = s.unpack(str[start:end])
      start = end
      end += 1
      (self.rows,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.client_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.matrix.rows
      buff.write(_get_struct_I().pack(_x))
      length = len(self.matrix.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.matrix.data.tostring())
      _x = self.rows
      buff.write(_get_struct_b().pack(_x))
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.matrix is None:
        self.matrix = graph_d_exploration.msg.InfoMatrix()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.client_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.client_id = str[start:end]
      start = end
      end += 4
      (self.matrix.rows,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.rows,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
